#!/bin/bash
#
#    blockbackup - Block level inremental backup tool
#
#
#    Copyright (C) 2016-2019 Marek Wodzinski
#                  2024-     Andy Smith
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#


USE_ZIP=0
SOURCE=
DEST=
CHUNK=1M
DO_MD5=1
ZCAT=cat
ZEXT=
NUMZIPS=4
STARTCHUNK=0
ENDCHUNK=
NOUPDATE=0
SYMLINK=""
SKIPSAME=0
IGNORE_ERR=0

function usage() {
    echo "ERROR: unknown option/paramter"
    echo "Usage: blockbackup -s device -d directory [-z|-za] [-n num_zips] [-c chunk] [-mn] [-sc start] [-se end] [-nu] [-l] [-ss] [-ie]"
    echo "    -s|--source device     source device"
    echo "    -d|--dest directory    destination directory"
    echo "    -z|--zip               compress every block right after read/compare"
    echo "    -za|--zip-after        compress new blocks at the end of process"
    echo "    -n|--num-zips N        run maximum N zip processess in parallel (default=4)"
    echo "    -c|--chunk N           set chunk size to N (default=1M)"
    echo "    -nm|--no-md5           don't generate md5 for every chunk"
    echo "    -sc|--start-chunk N    start dump from chunk N (default=0)"
    echo "    -ec|--end-chunk N      end dump at chunk N (default=end of device)"
    echo "    -nu|--no-update        don't update lastsync link at the end"
    echo "    -l|--symlink           use symbolic links instead of hard links"
    echo "    -ss|--skip-same        don't put link if reference chunk is the same"
    echo "    -ie|--ignore-errors    don't stop on dd errors, must be used with --end-chunk"
    exit 1
}


#get/parse parameters
while true; do
    case "$1" in
    -z|--zip)
        USE_ZIP=1
        ZCAT=zcat
        ZEXT=.gz
        ;;
    -za|--zip-after)
        USE_ZIP=2
        ZCAT=zcat
        ZEXT=.gz
        ;;
    -s|--source)
        shift
        SOURCE="$1"
        if [ ! -b "${SOURCE}" ]; then
        echo "ERROR: source must be device!"
        exit 1
        fi
        ;;
    -d|--dest)
        shift
        DEST="$1"
        if [ ! -d "${DEST}" ]; then
        echo "ERROR: destination must be existing directory"
        exit 1
        fi
        ;;
    -c|--chunk)
        shift
        CHUNK=$1
        ;;
    -nm|--no-md5)
        DO_MD5=0
        ;;
    -n|--num-zips)
        shift
        NUMZIPS=$(($1))
        ;;
    -sc|--start-chunk)
        shift
        STARTCHUNK=$(($1))
        ;;
    -ec|--end-chunk)
        shift
        ENDCHUNK=$(($1))
        ;;
    -nu|--no-update)
        NOUPDATE=1
        ;;
    -l|--symlink)
        SYMLINK="-s"
        ;;
    -ss|--skip-same)
        SKIPSAME=1
        ;;
    -ie|--ignore-errors)
        IGNORE_ERR=1
        ;;
    *)
        usage
        ;;
    esac
    shift
    if [ -z "$1" ]; then break; fi
done

if [ -z "${SOURCE}" -o -z "${DEST}" ]; then usage; fi
if [[ $IGNORE_ERR -eq 1 ]] && [[ -z "$ENDCHUNK" ]]; then usage; fi


echo "Doing incremental backup of device ${SOURCE} to directory ${DEST} with chunk size ${CHUNK}"


TODAY=$(date +%F_%H%M%S)

cd "${DEST}" || exit 1
mkdir "${TODAY}"

#base
if [ -L lastsync ]; then
    BASE=$(readlink lastsync)
else
    BASE=""
fi


#START COPY
while true; do
    NEWNAME=$(printf "%08d\n" $STARTCHUNK)
    echo -n "${NEWNAME} : "
    NEWDIR=${NEWNAME:0:5}
    mkdir -p "${TODAY}/${NEWDIR}"

    #read chunk
    dd if="${SOURCE}" of="${TODAY}/${NEWDIR}/${NEWNAME}" count=1 bs=${CHUNK} skip=${STARTCHUNK}  1>/dev/null 2>&1

    if [ $? -ne 0 ] && [[ $IGNORE_ERR -eq 0 ]]; then
        # Error or eof
        echo "end of source or error"
        break
    else
        ${ZCAT} "${BASE}/${NEWDIR}/${NEWNAME}${ZEXT}" 2>/dev/null|cmp "${TODAY}/${NEWDIR}/${NEWNAME}" 1>/dev/null 2>&1

        if [ $? -eq 0 ]; then
            # The same - remove and make hardlink to old one.
            rm "${TODAY}/${NEWDIR}/${NEWNAME}"

            if [[ $SKIPSAME -eq 0 ]]; then
                ln -v "$SYMLINK" "${BASE}/${NEWDIR}/${NEWNAME}${ZEXT}" "${TODAY}/${NEWDIR}/${NEWNAME}${ZEXT}"

                if [ ${DO_MD5} -eq 1 ]; then
                    ln "$SYMLINK" "${BASE}/${NEWDIR}/${NEWNAME}.md5" "${TODAY}/${NEWDIR}/${NEWNAME}.md5"
                fi
            fi
        else
            # Not the same - leave it.
            echo "new ${TODAY}/${NEWDIR}/${NEWNAME}"

            if [ ${DO_MD5} -eq 1 ]; then
                md5sum "${TODAY}/${NEWDIR}/${NEWNAME}" >"${TODAY}/${NEWDIR}/${NEWNAME}.md5"
            fi

            if [ ${USE_ZIP} -eq 1 ]; then
                # gzip this chunk immediatrely.
                if [ $(jobs|wc -l) -lt ${NUMZIPS} ]; then
                    gzip -9 "${TODAY}/${NEWDIR}/${NEWNAME}" &
                else
                    gzip -9 "${TODAY}/${NEWDIR}/${NEWNAME}"
                fi
            fi
        fi

        STARTCHUNK=$(( $STARTCHUNK+1 ))
        [ "${ENDCHUNK}" ] && [ ${STARTCHUNK} -gt ${ENDCHUNK} ] && break
    fi
done

if [ ${USE_ZIP} -eq 2 ]; then
    # gzip everything after.
    echo "zipping everything"
    find "${TODAY}" -type f -regex '.*[0-9][0-9]$'|while read tozip; do
    if [ $(jobs|wc -l) -le ${NUMZIPS} ]; then
        gzip -9v "${tozip}" &
    else
        gzip -9v "${tozip}"
    fi
    done
fi


# Update lastsync link.
if [ ${NOUPDATE} -eq 0 ]; then
    rm lastsync 1>/dev/null 2>&1
    ln -s "${TODAY}" lastsync
fi
